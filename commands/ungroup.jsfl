function main(dom){	//fl.trace(dom);	if(dom ==undefined){		var dom = fl.getDocumentDOM();	}	if(dom == undefined){		return;	}	var lib = dom.library;	//fl.trace("lib:"+lib);	var items = lib.items;	var list = ["movie clip","button"];	unGroupAll(dom);}//main();function openFile(){	fl.outputPanel.clear();		var filePath = fl.browseForFileURL("open","select file");		fl.trace(filePath);		//fl.trace(fName);		//fl.trace(fName.lastIndexOf(".fla"));		if(filePath.lastIndexOf(".fla")!=-1){			fl.trace(fName+"====");			fl.openDocument(filePath);			var dom = fl.getDocumentDOM();			main(dom);			//fl.closeDocument(dom,);			fl.saveDocument(dom);			fl.closeDocument(dom);			//fl.trace(dom);			//fl.closeDocument(dom);		}			//fl.trace(fName);		//fl.openDocument(filePath);		//dom = fl.getDocumentDOM();}function openFolder(){	fl.outputPanel.clear();			//var filePath = fl.browseForFileURL("open","select file");			//return;		var folderPath = fl.browseForFolderURL("open","select file");		fl.trace(folderPath);		var fileList= FLfile.listFolder(folderPath,"files");		//fl.trace(fileList);		for each(var fName in fileList){			//fl.trace(fName);			//fl.trace(fName.lastIndexOf(".fla"));			if(fName.lastIndexOf(".fla")!=-1){				fl.trace(fName+"====");				fl.openDocument(folderPath+"/"+fName);				var dom = fl.getDocumentDOM();				main(dom);				//fl.closeDocument(dom,);				fl.saveDocument(dom);				fl.closeDocument(dom);				//fl.trace(dom);				//fl.closeDocument(dom);			}			//fl.trace(fName);		}		//fl.openDocument(filePath);		//dom = fl.getDocumentDOM();}fl.outputPanel.clear();//openFile();main();/** * Constructor for KeyFrame objects * KeyFrame objects represent key frames which contain elements * @param symbol Item object which contains the KeyFrame * @param layer Layer oject which contains the KeyFrame * @param frame Frame object which is the KeyFrame */function KeyFrame(symbol, layer, frame){	this.symbol = symbol;	this.layer = layer;	this.frame = frame;		this.toString = function()	{		return this.symbol.name + " (" + this.symbol.itemType + ") layer: " + this.layer.name + ", frame: " + this.frame.startFrame;	}	}//  //  //  //  METHODS  //  //  //  ///** * Take all key frames and ungroup all elements */function unGroupAll(dom){	var symbols = getSymbols(dom);	var keyFrames = new Array();		// key frames from library	for(var i = 0; i < symbols.length; i++)		keyFrames = keyFrames.concat(getKeyFrames(symbols[i],dom));			// key frames from main time line	keyFrames = keyFrames.concat(getKeyFrames(null,dom));		for(var i = 0; i < keyFrames.length; i++)		ungroupKeyFrame(keyFrames[i],dom);			dom.editScene(0);}/** * Scan the library for items of type "movie clip", "button" and "graphic" * @return array with all symbols */function getSymbols(dom){	var libItems = dom.library.items;	var libSymbols = new Array();		for(i = 0; i < libItems.length; i++)	{		if(libItems[i].itemType == "movie clip")			libSymbols.push(libItems[i]);		else if(libItems[i].itemType == "button")			libSymbols.push(libItems[i]);		else if(libItems[i].itemType == "graphic")			libSymbols.push(libItems[i]);	}		return libSymbols;}/** * Get all key frames from a symbol * If symbol is null, the first scene's timeline is used instead * @param symbol Item object to get key frames from, null for first scene's timeline * @return Array with KeyFrame objects */function getKeyFrames(symbol,dom){	var layers;	var keyFrames = new Array();		layers = symbol != null ? symbol.timeline.layers :dom.getTimeline().layers;		for(var i = 0; i < layers.length; i++)	{		var layer = layers[i];				for(var j = 0; j < layer.frames.length; j++)		{			var frame = layer.frames[j];			if(frame.startFrame == j)			{				var keyFrame = new KeyFrame(symbol, layer, frame);				keyFrames.push(keyFrame);			}		}	}	return keyFrames;	}/** * Ungroup all Element objects in a key frame * @param keyFrame KeyFrame object containing the Element objects */function ungroupKeyFrame(keyFrame,dom){	var locked = keyFrame.layer.locked;	keyFrame.layer.locked = false;	var elements = keyFrame.frame.elements	for(var i = 0; i < elements.length; i++)		if(elements[i].elementType == "shape")			ungroupItemElement(keyFrame, elements[i],dom);			keyFrame.layer.locked = locked;}/** * Ungroups an element even if the groups are nested * @param item Item object which contains the Element object * @param element Element object which may be a group */function ungroupItemElement(keyFrame, element,dom){	if(element.elementType != "shape")		return;			element.locked = false;		if(keyFrame.symbol != null)   // symbol key frame	{		dom.library.editItem(keyFrame.symbol.name);		keyFrame.symbol.timeline.currentFrame = keyFrame.frame.startFrame;	} else   					  // main time line key frame	{		dom.editScene(0);		dom.getTimeline().currentFrame = keyFrame.frame.startFrame;	}		dom.selectNone();	dom.selection = [element];		if(dom.selection[0] == undefined)	{		dom.selectNone();		dom.selection = new Array();		return;	}	if(dom.selection[0].isGroup != true)	{		dom.selectNone();		dom.selection = new Array();		return;	}		dom.unGroup();	var ungrouped = dom.selection;	dom.selectNone();		for(var j = 0; j < ungrouped.length; j++)		ungroupItemElement(keyFrame, ungrouped[j],dom);	}